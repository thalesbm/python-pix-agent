LangGraph

🔧 Persistência/estado:
Considere checkpointer para persistir o GraphState (memória entre execuções/erros).

🔧 Interrupções explícitas:
Use interrupt para coletar dados faltantes do usuário (ex.: pedir chave ou valor faltantes) em vez de encerrar o fluxo.

🔧 Estruturas mais declarativas:
Onde há parsing de JSON, substitua por with_structured_output com modelos Pydantic (reduz falhas do JSON).

🔧 Rotas/fallbacks produtivos:
O fallback deveria sempre produzir state.answer curto e útil.

🔧 Adote um checkpointer (ex.: MemorySaver em dev; SqliteSaver/RedisSaver em prod) para:
- Retomar fluxos interrompidos,
- Guiar “voltar uma etapa”,
- Auditar o histórico de estados.

🔧 Substitua prompts que pedem JSON por structured output com Pydantic ou “function calling”:
- Menos fragilidade de json.loads,
